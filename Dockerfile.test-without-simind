# Dockerfile.test-without-simind
# Lightweight testing container without SIMIND for CI/CD pipelines
# Optimized for fast builds and minimal size

ARG SIRF_TAG=latest
FROM synerbi/sirf:${SIRF_TAG}

# Build arguments for customization
ARG DEBIAN_FRONTEND=noninteractive
ARG PYTHON_VERSION=3.9

# Environment variables
ENV DEBIAN_FRONTEND=${DEBIAN_FRONTEND} \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/home/sirfuser/workspace

# Labels for container identification
LABEL maintainer="SIRF-SIMIND Team" \
      version="1.0" \
      description="SIRF testing environment without SIMIND" \
      usage="docker run --rm -v \$(pwd):/home/sirfuser/workspace sirf-simind-test"

# Switch to root for system package installation
USER root

# Install minimal system dependencies for testing
RUN set -euo pipefail && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        # Essential build tools
        git=1:* \
        build-essential=12.* \
        # For code coverage and reporting
        curl=7.* \
        # For performance monitoring
        htop=3.* \
        # For file operations in tests
        file=1:* \
        && \
    # Clean up to reduce image size
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    # Remove unnecessary packages
    apt-get autoremove -y

# Switch to sirfuser for remaining operations
USER sirfuser
WORKDIR /home/sirfuser

# Upgrade pip and install testing dependencies in single layer
RUN set -euo pipefail && \
    python -m pip install --user --no-cache-dir --upgrade \
        pip>=21.0 \
        setuptools>=60.0 \
        wheel>=0.37 && \
    python -m pip install --user --no-cache-dir \
        # Core testing framework
        pytest>=7.0.0 \
        pytest-cov>=4.0.0 \
        pytest-mock>=3.10.0 \
        pytest-xdist>=3.0.0 \
        pytest-timeout>=2.1.0 \
        pytest-benchmark>=4.0.0 \
        # Code quality tools
        black>=23.0.0 \
        flake8>=6.0.0 \
        mypy>=1.0.0 \
        isort>=5.12.0 \
        bandit>=1.7.5 \
        # Performance monitoring
        psutil>=5.9.0 \
        memory-profiler>=0.60.0 \
        # Additional testing utilities
        coverage>=7.0.0 \
        pytest-html>=3.1.0

# Create workspace directory
RUN mkdir -p /home/sirfuser/workspace
WORKDIR /home/sirfuser/workspace

# Copy requirements and setup files first for better layer caching
COPY --chown=sirfuser:sirfuser requirements*.txt setup.py pyproject.toml ./

# Install the package dependencies
RUN python -m pip install --user --no-cache-dir \
    -r requirements.txt || echo "requirements.txt not found, skipping"

# Copy source code
COPY --chown=sirfuser:sirfuser src/ ./src/

# Install the package in editable mode
RUN python -m pip install --user --no-cache-dir -e . || \
    python -m pip install --user --no-cache-dir -e ".[dev]" || \
    echo "Package installation failed, continuing..."

# Copy test files and configuration
COPY --chown=sirfuser:sirfuser tests/ ./tests/
COPY --chown=sirfuser:sirfuser pytest.ini Makefile .flake8 pyproject.toml ./

# Create comprehensive test runner script
RUN cat > /home/sirfuser/run_tests.sh << 'EOF'
#!/bin/bash
set -euo pipefail

# Color codes for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
MARKERS="not requires_simind"
VERBOSE=true
COVERAGE=true
OUTPUT_DIR="test-results"
FAIL_UNDER=70

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --markers|-m)
            MARKERS="$2"
            shift 2
            ;;
        --no-coverage)
            COVERAGE=false
            shift
            ;;
        --quiet|-q)
            VERBOSE=false
            shift
            ;;
        --output-dir|-o)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        --fail-under)
            FAIL_UNDER="$2"
            shift 2
            ;;
        --help|-h)
            echo "Usage: $0 [options]"
            echo "Options:"
            echo "  --markers, -m MARKERS    Pytest markers (default: 'not requires_simind')"
            echo "  --no-coverage           Disable coverage reporting"
            echo "  --quiet, -q             Reduce output verbosity"
            echo "  --output-dir, -o DIR    Output directory (default: test-results)"
            echo "  --fail-under PERCENT    Coverage fail threshold (default: 70)"
            echo "  --help, -h              Show this help"
            exit 0
            ;;
        *)
            echo "Unknown option: $1" >&2
            exit 1
            ;;
    esac
done

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}SIRF-SIMIND-Connection Test Runner${NC}"
echo -e "${BLUE}========================================${NC}"

# Display environment information
echo -e "${YELLOW}Environment Information:${NC}"
echo "  Python: $(python --version)"
echo "  Working directory: $(pwd)"
echo "  Test markers: $MARKERS"
echo "  Coverage enabled: $COVERAGE"
echo "  Output directory: $OUTPUT_DIR"

# Check SIRF installation
echo -e "${YELLOW}Checking Dependencies:${NC}"
if python -c "import sirf; print(f'  ‚úÖ SIRF version: {sirf.__version__}')" 2>/dev/null; then
    echo "  ‚úÖ SIRF imported successfully"
else
    echo -e "  ${RED}‚ùå SIRF import failed${NC}"
    exit 1
fi

# Check package installation
if python -c "import sirf_simind_connection; print(f'  ‚úÖ Package version: {sirf_simind_connection.__version__}')" 2>/dev/null; then
    echo "  ‚úÖ sirf_simind_connection imported successfully"
else
    echo -e "  ${YELLOW}‚ö†Ô∏è sirf_simind_connection import failed - may be expected in some test scenarios${NC}"
fi

# Create output directory
mkdir -p "$OUTPUT_DIR"

# Build pytest command
PYTEST_CMD="pytest tests/"
PYTEST_ARGS=()

# Add markers
if [ -n "$MARKERS" ]; then
    PYTEST_ARGS+=("-m" "$MARKERS")
fi

# Add verbosity
if [ "$VERBOSE" = true ]; then
    PYTEST_ARGS+=("-v")
else
    PYTEST_ARGS+=("-q")
fi

# Add basic options
PYTEST_ARGS+=(
    "--tb=short"
    "--strict-markers"
    "--strict-config"
    "--junitxml=$OUTPUT_DIR/junit.xml"
)

# Add coverage options
if [ "$COVERAGE" = true ]; then
    PYTEST_ARGS+=(
        "--cov=sirf_simind_connection"
        "--cov-report=xml:$OUTPUT_DIR/coverage.xml"
        "--cov-report=html:$OUTPUT_DIR/htmlcov"
        "--cov-report=term-missing"
        "--cov-fail-under=$FAIL_UNDER"
    )
fi

# Run tests
echo -e "${YELLOW}Running Tests:${NC}"
echo "Command: $PYTEST_CMD ${PYTEST_ARGS[*]}"
echo ""

if $PYTEST_CMD "${PYTEST_ARGS[@]}"; then
    echo ""
    echo -e "${GREEN}‚úÖ All tests passed!${NC}"
    
    # Display coverage summary if available
    if [ "$COVERAGE" = true ] && [ -f "$OUTPUT_DIR/coverage.xml" ]; then
        echo -e "${YELLOW}Coverage Summary:${NC}"
        python -c "
import xml.etree.ElementTree as ET
try:
    tree = ET.parse('$OUTPUT_DIR/coverage.xml')
    root = tree.getroot()
    coverage = root.attrib.get('line-rate', '0')
    percentage = float(coverage) * 100
    print(f'  üìä Line coverage: {percentage:.1f}%')
except Exception as e:
    print(f'  ‚ùå Could not parse coverage: {e}')
"
    fi
    
    echo ""
    echo -e "${BLUE}Test artifacts saved to: $OUTPUT_DIR${NC}"
    echo "  üìÑ JUnit XML: $OUTPUT_DIR/junit.xml"
    if [ "$COVERAGE" = true ]; then
        echo "  üìä Coverage XML: $OUTPUT_DIR/coverage.xml"
        echo "  üìä Coverage HTML: $OUTPUT_DIR/htmlcov/index.html"
    fi
    
    exit 0
else
    echo ""
    echo -e "${RED}‚ùå Tests failed!${NC}"
    echo -e "${YELLOW}Check the output above for details.${NC}"
    exit 1
fi
EOF

RUN chmod +x /home/sirfuser/run_tests.sh

# Create quick validation script
RUN cat > /home/sirfuser/validate.sh << 'EOF'
#!/bin/bash
set -euo pipefail

echo "üîç Quick Validation Check"
echo "========================"

# Check Python and basic imports
echo "‚Üí Checking Python environment..."
python --version

echo "‚Üí Checking SIRF..."
python -c "import sirf; print(f'SIRF version: {sirf.__version__}')"

echo "‚Üí Checking package structure..."
if [ -d "src/sirf_simind_connection" ]; then
    echo "‚úÖ Package source directory found"
    python -c "import sirf_simind_connection; print(f'Package version: {sirf_simind_connection.__version__}')" || echo "‚ö†Ô∏è Package import failed"
else
    echo "‚ùå Package source directory not found"
fi

echo "‚Üí Checking test structure..."
if [ -d "tests" ]; then
    test_count=$(find tests -name "test_*.py" | wc -l)
    echo "‚úÖ Found $test_count test files"
else
    echo "‚ùå Tests directory not found"
fi

echo ""
echo "‚úÖ Validation completed!"
EOF

RUN chmod +x /home/sirfuser/validate.sh

# Create lint runner script
RUN cat > /home/sirfuser/run_lint.sh << 'EOF'
#!/bin/bash
set -euo pipefail

echo "üîç Code Quality Checks"
echo "====================="

EXIT_CODE=0

# Black formatting check
echo "‚Üí Checking code formatting with Black..."
if black --check --diff src/ tests/ 2>/dev/null; then
    echo "‚úÖ Black: Code formatting is correct"
else
    echo "‚ùå Black: Code formatting issues found"
    EXIT_CODE=1
fi

# Flake8 style check
echo "‚Üí Checking style with Flake8..."
if flake8 src/ tests/ 2>/dev/null; then
    echo "‚úÖ Flake8: No style issues found"
else
    echo "‚ùå Flake8: Style issues found"
    EXIT_CODE=1
fi

# MyPy type checking (if configured)
if [ -f "pyproject.toml" ] && grep -q "mypy" pyproject.toml; then
    echo "‚Üí Checking types with MyPy..."
    if mypy src/ 2>/dev/null; then
        echo "‚úÖ MyPy: No type issues found"
    else
        echo "‚ùå MyPy: Type issues found"
        EXIT_CODE=1
    fi
fi

# Bandit security check
echo "‚Üí Checking security with Bandit..."
if bandit -r src/ -f txt 2>/dev/null >/dev/null; then
    echo "‚úÖ Bandit: No security issues found"
else
    echo "‚ùå Bandit: Security issues found"
    EXIT_CODE=1
fi

if [ $EXIT_CODE -eq 0 ]; then
    echo ""
    echo "‚úÖ All code quality checks passed!"
else
    echo ""
    echo "‚ùå Some code quality checks failed"
fi

exit $EXIT_CODE
EOF

RUN chmod +x /home/sirfuser/run_lint.sh

# Set up minimal health check
HEALTHCHECK --interval=60s --timeout=10s --start-period=30s --retries=2 \
    CMD python -c "import sirf" || exit 1

# Default command runs the test suite
CMD ["/home/sirfuser/run_tests.sh"]

# Add metadata for multi-stage build compatibility
LABEL stage="testing"