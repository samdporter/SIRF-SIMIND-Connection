# Dockerfile.sirf-simind - Multi-stage build with SIRF and SIMIND
# Optimized for different use cases: base, development, testing, production

ARG SIRF_TAG=latest

# =============================================================================
# Base stage - Common dependencies and setup
# =============================================================================
FROM synerbi/sirf:${SIRF_TAG} as base

# Build arguments
ARG DEBIAN_FRONTEND=noninteractive
ARG SIMIND_VERSION=latest

# Environment variables
ENV DEBIAN_FRONTEND=${DEBIAN_FRONTEND} \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    SIMIND_HOME=/opt/simind \
    PATH="/opt/simind/bin:${PATH}" \
    LD_LIBRARY_PATH="/opt/simind/lib:${LD_LIBRARY_PATH:-}" \
    PYTHONPATH="/home/sirfuser/workspace:${PYTHONPATH:-}"

# Create labels
LABEL maintainer="SIRF-SIMIND Team" \
      version="1.0" \
      description="SIRF with SIMIND support"

# Switch to root for system-level installations
USER root

# Install system dependencies in single layer with cleanup
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        wget \
        curl \
        unzip \
        gfortran \
        build-essential \
        git \
        vim \
        htop \
        tree \
        file \
        libc6-dev \
        libgfortran5 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Create SIMIND directories with proper ownership
RUN mkdir -p /opt/simind /home/sirfuser/.simind && \
    chown -R sirfuser:sirfuser /home/sirfuser/.simind

# Copy and setup SIMIND installation script
COPY docker/install_simind.sh /usr/local/bin/install_simind.sh
RUN chmod +x /usr/local/bin/install_simind.sh

# Switch back to sirfuser for remaining operations
USER sirfuser
WORKDIR /home/sirfuser

# Upgrade pip in separate layer for better caching
RUN python -m pip install --user --no-cache-dir --upgrade \
    pip>=21.0 \
    setuptools>=60.0 \
    wheel>=0.37

# =============================================================================
# Development stage - Full development environment
# =============================================================================
FROM base as development

USER sirfuser

# Install development and testing dependencies
RUN python -m pip install --user --no-cache-dir \
        pytest>=7.0.0 \
        pytest-cov>=4.0.0 \
        pytest-mock>=3.10.0 \
        pytest-xdist>=3.0.0 \
        pytest-benchmark>=4.0.0 \
        pytest-timeout>=2.1.0 \
        black>=23.0.0 \
        flake8>=6.0.0 \
        mypy>=1.0.0 \
        isort>=5.12.0 \
        bandit>=1.7.5 \
        pre-commit>=3.0.0 \
        psutil>=5.9.0 \
        memory-profiler>=0.60.0 \
        line-profiler>=4.0.0 \
        sphinx>=6.0.0 \
        sphinx-rtd-theme>=1.2.0 \
        jupyter>=1.0.0 \
        ipykernel>=6.20.0 \
        matplotlib>=3.6.0

# Create workspace and copy project files
RUN mkdir -p /home/sirfuser/workspace
WORKDIR /home/sirfuser/workspace

# Copy requirements first for better layer caching
COPY --chown=sirfuser:sirfuser requirements*.txt setup.py pyproject.toml ./
COPY --chown=sirfuser:sirfuser src/ ./src/

# Install package in development mode
RUN python -m pip install --user --no-cache-dir -e ".[dev]" || \
    python -m pip install --user --no-cache-dir -e .

# Copy remaining project files
COPY --chown=sirfuser:sirfuser . .

# Generate test data if possible
RUN python scripts/generate_test_data.py --output-dir test_data 2>/dev/null || \
    echo "Test data generation skipped (dependencies may be missing)"

# Create enhanced startup script
RUN printf '#!/bin/bash\n\
\n\
# Color codes for output\n\
RED="\\033[0;31m"\n\
GREEN="\\033[0;32m"\n\
YELLOW="\\033[1;33m"\n\
BLUE="\\033[0;34m"\n\
NC="\\033[0m"\n\
\n\
echo -e "${BLUE}===============================================${NC}"\n\
echo -e "${BLUE}SIRF-SIMIND-Connection Development Environment${NC}"\n\
echo -e "${BLUE}===============================================${NC}"\n\
\n\
# System information\n\
echo -e "${YELLOW}System Information:${NC}"\n\
echo "  Container: $(hostname)"\n\
echo "  User: $(whoami)"\n\
echo "  Working directory: $(pwd)"\n\
echo "  Python: $(python --version)"\n\
\n\
# SIRF status\n\
echo -e "${YELLOW}SIRF Status:${NC}"\n\
if python -c "import sirf; print(f'\'  ‚úÖ SIRF version: {sirf.__version__}'\'')" 2>/dev/null; then\n\
    echo "  ‚úÖ SIRF imported successfully"\n\
else\n\
    echo -e "  ${RED}‚ùå SIRF import failed${NC}"\n\
fi\n\
\n\
# SIMIND status\n\
echo -e "${YELLOW}SIMIND Status:${NC}"\n\
if command -v simind >/dev/null 2>&1; then\n\
    echo "  ‚úÖ SIMIND executable found at: $(which simind)"\n\
    if simind --version >/dev/null 2>&1; then\n\
        echo "  ‚úÖ SIMIND version: $(simind --version 2>&1 | head -1)"\n\
    else\n\
        echo "  ‚ÑπÔ∏è  SIMIND version check inconclusive"\n\
    fi\n\
else\n\
    echo -e "  ${RED}‚ùå SIMIND not found in PATH${NC}"\n\
    echo -e "  ${YELLOW}üìã To install SIMIND:${NC}"\n\
    echo "     1. Download from https://simind.blogg.lu.se/downloads/"\n\
    echo "     2. Copy to container: docker cp simind.tar.gz <container>:/tmp/"\n\
    echo "     3. Run: install_simind.sh /tmp/simind.tar.gz"\n\
fi\n\
\n\
# Package status\n\
echo -e "${YELLOW}Package Status:${NC}"\n\
if python -c "import sirf_simind_connection; print(f'\'  ‚úÖ Package version: {sirf_simind_connection.__version__}'\'')" 2>/dev/null; then\n\
    echo "  ‚úÖ sirf_simind_connection imported successfully"\n\
else\n\
    echo -e "  ${RED}‚ùå sirf_simind_connection import failed${NC}"\n\
fi\n\
\n\
echo ""\n\
echo -e "${YELLOW}Available Commands:${NC}"\n\
echo "  ${GREEN}make test-quick${NC}     - Run quick tests"\n\
echo "  ${GREEN}make test${NC}           - Run all tests"\n\
echo "  ${GREEN}make validate${NC}       - Validate installation"\n\
echo "  ${GREEN}make lint${NC}           - Run code quality checks"\n\
echo "  ${GREEN}make format${NC}         - Format code with black"\n\
echo "  ${GREEN}jupyter lab${NC}         - Start Jupyter Lab"\n\
echo ""\n\
echo -e "${YELLOW}Testing Commands:${NC}"\n\
echo "  ${GREEN}pytest tests/ -v${NC}                           - All tests"\n\
echo "  ${GREEN}pytest tests/ -m '\'not requires_simind'\' -v${NC}   - Tests without SIMIND"\n\
echo "  ${GREEN}pytest tests/ -m '\'requires_simind'\' -v${NC}       - SIMIND-dependent tests"\n\
echo "  ${GREEN}pytest tests/ --benchmark-only${NC}              - Performance benchmarks"\n\
echo ""\n\
echo -e "${YELLOW}Example Scripts:${NC}"\n\
echo "  ${GREEN}python examples/01_basic_simulation.py${NC}"\n\
echo "  ${GREEN}python examples/02_dicom_conversion.py${NC}"\n\
echo "  ${GREEN}python examples/05_complete_workflow.py${NC}"\n\
echo ""\n\
\n\
# Health check\n\
echo -e "${YELLOW}Quick Health Check:${NC}"\n\
python -c "\n\
try:\n\
    import sirf\n\
    import sirf_simind_connection\n\
    print('\'  ‚úÖ Core imports successful\'')\n\
except ImportError as e:\n\
    print(f'\'  ‚ùå Import error: {e}\'')\n\
"\n\
\n\
echo ""\n\
if [ "$#" -eq 0 ] || [ "$1" = "bash" ] || [ "$1" = "sh" ]; then\n\
    echo -e "${BLUE}Starting interactive shell...${NC}"\n\
    exec /bin/bash\n\
else\n\
    echo -e "${BLUE}Executing command: $*${NC}"\n\
    exec "$@"\n\
fi\n\
' > /home/sirfuser/startup.sh

RUN chmod +x /home/sirfuser/startup.sh

# Expose ports for development services
EXPOSE 8888 8000 5000

# Health check with comprehensive validation
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
    CMD python -c "import sirf; import sirf_simind_connection; print('Health check passed')" || exit 1

# Default command
CMD ["/home/sirfuser/startup.sh"]

# =============================================================================
# Testing stage - Optimized for CI/CD without SIMIND
# =============================================================================
FROM base as testing

USER sirfuser

# Install only testing dependencies (lighter weight)
RUN python -m pip install --user --no-cache-dir \
        pytest>=7.0.0 \
        pytest-cov>=4.0.0 \
        pytest-mock>=3.10.0 \
        pytest-xdist>=3.0.0 \
        pytest-timeout>=2.1.0 \
        black>=23.0.0 \
        flake8>=6.0.0 \
        mypy>=1.0.0 \
        bandit>=1.7.5

# Create workspace and install package
RUN mkdir -p /home/sirfuser/workspace
WORKDIR /home/sirfuser/workspace

# Copy and install package
COPY --chown=sirfuser:sirfuser requirements*.txt setup.py pyproject.toml ./
COPY --chown=sirfuser:sirfuser src/ ./src/
RUN python -m pip install --user --no-cache-dir -e .

# Copy test files
COPY --chown=sirfuser:sirfuser tests/ ./tests/
COPY --chown=sirfuser:sirfuser Makefile pytest.ini ./

# Create test runner script
RUN printf '#!/bin/bash\n\
\n\
echo "Starting test suite..."\n\
echo "Python version: $(python --version)"\n\
echo "Working directory: $(pwd)"\n\
\n\
# Run tests with comprehensive options\n\
pytest tests/ \\\n\
    -m "not requires_simind" \\\n\
    -v \\\n\
    --tb=short \\\n\
    --strict-markers \\\n\
    --strict-config \\\n\
    --junitxml=test-results/junit.xml \\\n\
    --cov=sirf_simind_connection \\\n\
    --cov-report=xml:test-results/coverage.xml \\\n\
    --cov-report=html:test-results/htmlcov \\\n\
    --cov-report=term-missing \\\n\
    --cov-fail-under=80 \\\n\
    "$@"\n\
\n\
echo "Tests completed successfully!"\n\
' > /home/sirfuser/run_tests.sh

RUN chmod +x /home/sirfuser/run_tests.sh

# Default command for testing
CMD ["/home/sirfuser/run_tests.sh"]

# =============================================================================
# Production stage - Minimal runtime environment
# =============================================================================
FROM base as production

USER sirfuser

# Install only runtime dependencies
RUN python -m pip install --user --no-cache-dir \
        numpy>=1.21.0 \
        scipy>=1.7.0

# Create workspace and install package
RUN mkdir -p /home/sirfuser/workspace
WORKDIR /home/sirfuser/workspace

# Copy and install package (production mode)
COPY --chown=sirfuser:sirfuser requirements.txt setup.py pyproject.toml ./
COPY --chown=sirfuser:sirfuser src/ ./src/
RUN python -m pip install --user --no-cache-dir .

# Copy only necessary runtime files
COPY --chown=sirfuser:sirfuser examples/ ./examples/
COPY --chown=sirfuser:sirfuser README.md LICENSE ./

# Create production startup script
RUN printf '#!/bin/bash\n\
echo "SIRF-SIMIND-Connection Production Environment"\n\
echo "============================================="\n\
python -c "import sirf_simind_connection; print(f'\'Version: {sirf_simind_connection.__version__}'\')"\n\
exec "$@"\n\
' > /home/sirfuser/startup.sh

RUN chmod +x /home/sirfuser/startup.sh

# Minimal health check
HEALTHCHECK --interval=60s --timeout=10s --start-period=30s --retries=2 \
    CMD python -c "import sirf_simind_connection" || exit 1

# Default command
CMD ["/home/sirfuser/startup.sh", "python"]